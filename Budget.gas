

/*
 ************************
 *		menu items		*
 ************************
 */

function makeNewTransRows()
{
	var me = SpreadsheetApp.getActiveSpreadsheet();
	var tab = me.getActiveSheet();
	var tabname = tab.getName();
	if (tabname == "Checking" || tabname == "Savings")
	{
		var num_rows = ~~l.prompt("NEW LEDGER ROWS", "How many rows do you need to add?");
		var add_rows = function (tab)
		{
			var top_row = l.getDataSlice(tab, { row: 1, after_headers: true, as: 'range' });
			var top_rownum = top_row.getRow();
			// figure out how many columns are blank vs have formulae in them
			// (have to add one to change `findIndex` return (0-origin) to a column number (1-origin))
			var formulae_start_at = l.firstidx(l.flatten(top_row.getFormulas()), function (_) { return _ != "" }) + 1;
			tab.insertRowsBefore(top_rownum, num_rows);
			var last_column = tab.getMaxColumns();
			l.debug(2, "makeNewTransRows: on " + tab.getName() + ", inserted " + num_rows + " rows, "
					+ "formulae at column " + formulae_start_at + " (out of " + last_column + ")");
			// have to reset "top_row", because it's no longer at the top
			top_row = l.getDataSlice(tab, { row: num_rows + 1, after_headers: true, as: 'range' });
			if ( formulae_start_at == 0 )
			{
				// no formulae
				top_row.copyTo(tab.getRange(top_rownum, 1, num_rows, last_column), {formatOnly: true});
			}
			else
			{
				// left side, values: copy formats only; right side, formulae: copy everything
				var last_value = formulae_start_at - 1;
				var left_side = top_row.offset(0,0, 1,last_value);
				l.debug(3, "makeNewTransRows: copying formats from " + l.displayAddress(left_side) + " to "
						+ top_rownum + ',' + 1 + '+' + num_rows + '+' + last_value);
				left_side.copyTo(tab.getRange(top_rownum, 1, num_rows, last_value), {formatOnly: true});
				var right_side = top_row.offset(0,formulae_start_at-1, 1,last_column-formulae_start_at);
				l.debug(3, "makeNewTransRows: copying all from " + l.displayAddress(right_side) + " to "
						+ top_rownum + ',' + formulae_start_at + '+' + num_rows + '+' + last_column);
				right_side.copyTo(tab.getRange(top_rownum, formulae_start_at, num_rows, last_column));
			}
			tab.getRange(top_rownum, 1, 1,1).activate()
		};
		add_rows(me.getSheetByName(tabname + "Categorization"));
		add_rows(tab);
		l.infoMsg("Copy and paste rows in the space provided, values only (Ctrl-Shift-V).");
	}
	else
	{
		l.showError("You're not on a ledger tab.");
		return;
	}
}


function splitLine ()
{
	// use double ~ to force it to be an integer
	var num_splits = ~~l.prompt("SPLIT ITEM", "How many line items to split into?");
	if (num_splits == undefined)
	{
		return;
	}

	var me = SpreadsheetApp.getActiveSpreadsheet();
	var tab = me.getActiveSheet();
	var pos = me.getActiveCell();

	var rownum = pos.getRow();
	var row = tab.getRange(rownum, 1, 1, tab.getMaxColumns());
	tab.insertRowsAfter(rownum, num_splits - 1);
	for (var i=num_splits; i > 0; --i)
	{
		l.debug(3, "new row at pos " + (rownum + i - 1));
		var new_row = tab.getRange(rownum + i - 1, 1, 1, tab.getMaxColumns());
		var amount = new_row.getCell(1, 2);
		if (i == 1)
		{
			amount.setFormulaR1C1("=" + amount.getValue() + "-SUM(R[1]C[0]:R[" + (num_splits - 1) + "]C[0])");
		}
		else
		{
			row.copyTo(new_row);
			amount.clear();
		}
		var descr = new_row.getCell(1, 3);
		descr.setValue(descr.getValue() + " [" + i + "]");
	}
}


function splitPaycheck ()
{
	var date = l.prompt("SPLIT PAYCHECK", "Date of paycheck:");
	if (date == undefined)
	{
		return;
	}

	var me = SpreadsheetApp.getActiveSpreadsheet();
	var tab = me.getSheetByName("Transfer");
	var last_row = l.getFirstEmptyRow(tab.getName()).getRow() - 1;
	l.debug(2, "pulling last ID from row " + last_row);

	// let Sheets parse the date for us
	// (it will do a far better job than `Date.parse`)
	var date_cell = me.getRange("LastPaycheckDate").setValue(date);
	date = l.dateAsString( l.dateFromCell(date_cell) );
	l.debug(1, "using paycheck date: " + date);

	var dest_cols = { id:"ID", descr:"Description", amt:"Amount", from:"From Category", to:"To Category", };
	l.each(dest_cols, function (value, key, list)
	{
		var col = l.getColumnOfHeader(tab, value);
		if (col == undefined)
		{
			throw "cannot find column " + value + " on tab " + tab.getName();
		}
		list[key] = col;
	});
	var last_id = Number(tab.getRange(last_row, dest_cols.id, 1,1).getValue().substr(1));

	var budget_tab   = me.getSheetByName("Budget");
	var source_cols = { category:"Expenses:", fund:"Fund:", paycheck:"Per Paycheck:", };
	l.each(source_cols, function (value, key, list)
	{
		var col = l.getColumnOfHeader(budget_tab, value);
		if (col == undefined)
		{
			throw "cannot find column " + value + " on tab " + budget_tab.getName();
		}
		list[key] = col;
	});
	var categories = l.getDataSlice(budget_tab, { col: source_cols.category, as: 'values' });
	var fund_codes = l.getDataSlice(budget_tab, { col: source_cols.fund    , as: 'values' });
	var amounts    = l.getDataSlice(budget_tab, { col: source_cols.paycheck, as: 'values' });

	var description = "Paycheck Split (" + date + ")"
	var new_row = last_row + 1;
	last_row = l.getDataSlice(tab, { row: last_row, after_headers: true, as: 'range' });
	for (var i=0, len=categories.length; i < len; ++i)
	{
		var category  = categories[i][0];
		var fund_code = fund_codes[i][0];
		var amount    =    amounts[i][0];
		if (fund_code == "P")
		{
			var row = l.getDataSlice(tab, { row: new_row++, as: 'range' });
			last_row.copyTo(row, {formatOnly: true});
			row.getCell(1, dest_cols.id)   .setValue(Utilities.formatString('T%04d', ++last_id));
			row.getCell(1, dest_cols.descr).setValue(description);
			row.getCell(1, dest_cols.amt)  .setValue(amount);
			row.getCell(1, dest_cols.from) .setValue("Reserve");
			row.getCell(1, dest_cols.to)   .setValue(category);
		}
	}
}


function jumpToBottom ()
{
	var me = SpreadsheetApp.getActiveSpreadsheet();
	var tab = me.getActiveSheet();
	var tabname = tab.getName();

	var row;
	if (tabname == "Placeholder")
	{
		row = l.getFirstEmptyRow(tabname, undef);
	}
	else
	{
		row = l.getFirstEmptyRow(tabname);
	}
	if (row == undefined)
	{
		l.showError("No blank rows!");
		return;
	}
	row.activate();
}


/*
 ************************
 *		sheet setup		*
 ************************
 */

function onOpen ()
{
	var ui = SpreadsheetApp.getUi();
	ui.createMenu("Budget")
		.addItem("Insert Transactions", "makeNewTransRows")
		.addItem("Split Line Item", "splitLine")
		.addItem("Split Paycheck", "splitPaycheck")
		.addItem("Find Blank Row", "jumpToBottom")
		.addSubMenu(ui.createMenu("More Things")
				.addItem("SubThing", "subThing")
			)
		.addSeparator()
		.addItem("Test", "testCurrentThing")
		.addToUi();
}

function testCurrentThing ()
{
}
