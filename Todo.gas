/*
 ****************************
 *	General UI functions	*
 * (mostly stolen from the  *
 *  D&D RPG sheets        ) *
 ****************************
 */

	/*	Print an error message to the screen.  Requires click to proceed.
	 *	@param	{string}		msg				message to print
	 */
function showError (msg)
{
	var ui = SpreadsheetApp.getUi();
	ui.alert("ERROR", msg, ui.ButtonSet.OK);
}

	/*	Ask the user for a string and return it.  Return undefined if the user cancels.
	 *	@param	{title}			string			title for the prompt dialog
	 *	@param	{prompt}		string			prompt to show the user
	 *	@return	{string}						what the user typed; undefined if they cancelled
	 */
function prompt (title, prompt)
{
	var ui = SpreadsheetApp.getUi();
	var result = ui.prompt(title, prompt, ui.ButtonSet.OK_CANCEL);
	return result.getSelectedButton() == ui.Button.OK ? result.getResponseText() : undefined;
}


/*
 ********************
 *	 Date Stuff		*
 ********************
 */

function dateAsString (date)
{
	return (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();
}

function today ()
{
	var today = new Date();
	// Subtract 6 hours so midnight - 6am will be "yesterday."
	// See: https://stackoverflow.com/questions/1050720/adding-hours-to-javascript-date-object
	today.setTime(today.getTime() - 6*60*60*1000);
	return dateAsString(today);
}

function dateFromCell (cell)
{
	return new Date( Date.parse(cell.getValue()) );
}

function dateIntoCell (date, cell)
{
	Logger.log("dateIntoCell: going to set cell " + cell.getA1Notation() + " to value: "
			+ dateAsString(date) + "[from " + date.toString() + "]");
	cell.setValue( dateAsString(date) );
}


/*
 ********************
 *	Sheet Utility	*
 ********************
 */

	/*	Return the first empty row on the requested sheet.
	 *	@param	{string}		tab_name		name of the tab to find the first empty row of
	 *	@param	{number}		column			colum to check for values (default: 1)
	 *	@return	{Range}							range representing the first empty row
	 */
function getFirstEmptyRow (tab_name, column)
{
	// Handle defaults, since GAS JS is too old to do it in the signature.
	if ( column == undefined )
	{
		column = 1;
	}

	// http://stackoverflow.com/questions/6882104/faster-way-to-find-the-first-empty-row
	var me = SpreadsheetApp.getActiveSpreadsheet();
	var tab = me.getSheetByName(tab_name);
	var first_datarow = tab.getFrozenRows() + 1;
	var values = getDataSlice(tab, { col: column, as: 'values' });
	if (values == undefined)
	{
		return;
	}

	var ct = 0;
	//Logger.log("getFirstEmptyRow: checking row " + (ct + first_datarow));
	while ( values[ct][0] != "" )
	{
		//Logger.log("getFirstEmptyRow: checking row " + (ct + first_datarow) + " for tab " + tab_name);
		++ct;
	}
	// go from 0-origin to 1-origin
	// and account for header rows, which getDataColumn() throws away
	return getDataSlice(tab, { row: ct + 1, after_headers: true, as: 'range' });
}


function getDataSlice (tab, opts)
{
	var return_as = opts["as"];
	if (return_as == undefined)
	{
		showError("getDataSlice: must specify how to return");
		return;
	}

	var start_row, start_col, num_rows, num_cols;
	if (typeof(opts["row"]) != "undefined")
	{
		var header_cols = tab.getFrozenColumns();
		start_row = opts["row"];
		start_col = header_cols + 1;
		num_rows  = 1;
		num_cols  = tab.getMaxColumns() - header_cols;
		if (opts["after_headers"])
		{
			start_row += tab.getFrozenRows();
		}
	}
	else if (typeof(opts["col"]) != "undefined")
	{
		var header_rows = tab.getFrozenRows();
		start_row = header_rows + 1;
		start_col = opts["col"];
		num_rows  = tab.getMaxRows() - header_rows;
		num_cols  = 1;
		if (opts["after_headers"])
		{
			start_col += tab.getFrozenColumns();
		}
	}
	else
	{
		showError("getDataSlice: must specify either row or column");
		return;
	}

	var range = tab.getRange(start_row, start_col, num_rows, num_cols);
	if ( typeof range == 'undefined' )
	{
		showError("Cannot find any values to slice: " + start_row + ", " + start_col);
		return;
	}

	if (return_as == "range")
	{
		return range;
	}
	else if (return_as == "values")
	{
		return range.getValues();
	}
	else
	{
		showError("getDataRow: illegal return type: " + return_as);
		return;
	}
}


function getDataBlock (tab, start_col, end_col)
{
	var start = getColumnOfHeader(tab, start_col);
	var end   = getColumnOfHeader(tab, end_col  );
	var header_rows = tab.getFrozenRows();
	var height = tab.getMaxRows() - header_rows;
	var width  = end - start + 1;
	return tab.getRange(header_rows + 1, start, height, width);
}


/*
 ************************
 * general object funcs *
 ************************
 */

// I cannot believe that I don't have this as a built-in method.  Apparently I
// _should_ have it, but whatever Frankenstein version of JS that GAS uses is
// flipping me the bird.
// This implementation taken primarily from:
// https://stackoverflow.com/questions/208016/how-to-list-the-properties-of-a-javascript-object
function keys (object)
{
	var keys = [];
	for (var key in object)
	{
		// See: https://stackoverflow.com/questions/8312459/iterate-through-object-properties
		// (God, Javascript is stupid ...)
		if (object.hasOwnProperty(key))
		{
			keys.push(key);
		}
	}
	return keys;
}

function tabHeaders (tab)
{
	var headers = tab.getSheetValues(tab.getFrozenRows(), 1, 1, tab.getMaxColumns());
	return headers[0];
}

function getColumnOfHeader (tab, header)
{
	var headers = tabHeaders(tab);
	for (var i=0, len=headers.length; i < len; ++i)
	{
		Logger.log("getColumnOfHeader: checking " + headers[i] + " against " + header);
		if (headers[i] == header)
		{
			return i + 1;							// go from 0-origin to 1-origin
		}
	}
	return;											// undefined if not found
}

function getID (range)
{
	var row = range.getRow();
	var tab = range.getSheet();
	var last_header_row = tab.getFrozenRows();
	if (row <= last_header_row)
	{
		showError("Get out of the header!");
		return;
	}

	var id_col = getColumnOfHeader(tab, "ID");
	if (id_col == undefined)
	{
		showError("You're not on a sheet with an ID column.");
		return;
	}
	var vals = tab.getSheetValues(row, id_col, 1, 1);
	Logger.log("getID: returning ID " + vals[0][0]);
	return vals[0][0];
}

function getRowForObject (id)
{
	var me = SpreadsheetApp.getActiveSpreadsheet();
	var tab = me.getSheetByName("RawData");
	// cheating a bit by assuming ID is always in column 1 (and no frozen cols)
	// but this is also a performance enhancement, so I'll allow it
	var ids = getDataSlice(tab, { col: 1, as: "values" });
	for (var i=0, len=ids.length; i < len; ++i)
	{
		if (ids[i][0] == id)
		{
			// go from 0-origin to 1-origin
			// and account for header rows, which getDataColumn() throws away
			return getDataSlice(tab, { row: i + 1, after_headers: true, as: "range" });
		}
	}
	return;											// undefined if not found
}

function getObject (id)
{
	var values = getRowForObject(id).getValues()[0];
	var obj = {};
	for (var i=0, len=values.length; i < len; ++i)
	{
		Logger.log("getObject: calling dataHeaderColumn(" + (i + 1) + ")");
		var header = dataHeaderColumn(i + 1);
		if (header == undefined)
		{
			return;
		}
		obj[header] = values[i];
	}
	return obj;
}

var data_headers;
var data_header_row;
function dataHeaderColumn (column)
{
	if (data_headers == undefined)
	{
		var tab = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("RawData");
		data_header_row = tabHeaders(tab);
		data_headers = {};
		for (var i=0, len=data_header_row.length; i < len; ++i)
		{
			var header = data_header_row[i].toLowerCase();
			data_header_row[i] = header;			// save LC version back to the array
			data_headers[header] = i + 1;			// go from 0-origin to 1-origin
		}
	}

	if (typeof(column) == 'number' && column > 0 && column <= data_header_row.length)
	{
		return data_header_row[column - 1];
	}
	else if (typeof(column) == 'string' && data_headers.hasOwnProperty(column))
	{
		return data_headers[column];
	}
	else
	{
		showError("No such column in data: " + column);
		return;
	}
}

function dataSet (row, column, value)
{
	if (!typeof(row) == "Range")
	{
		showError("dataSet: first arg must be a Range");
		return;
	}

	var col = dataHeaderColumn(column);
	if (col == undefined)
	{
		return;
	}
	else
	{
		row.getCell(1, col).setValue(value);
		return 1;
	}
}

function newItem (object)
{
	var tab = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("RawData");
	var headers = tabHeaders(tab);
	var new_row = getFirstEmptyRow("RawData", 10);
	if (new_row == undefined)
	{
		showError("can't find an empty row for a new item");
		return;
	}
	if (!object.hasOwnProperty("description"))
	{
		showError("can't make an item without a description");
		return;
	}

	keys(object).forEach(function (key)
	{
		Logger.log("newItem: going to set " + key + " to " + object[key]);
		if (dataSet(new_row, key, object[key]) == undefined)
		{
			return;
		}
	});

	return new_row;
}

function updateItem (object)
{
	if (!object.hasOwnProperty("id"))
	{
		showError("Can't update item without ID.");
		return;
	}

	var row = getRowForObject(object.id);
	if (row == undefined)
	{
		showError("Illegal ID " + id + " (which should be impossible).");
		return;
	}

	for (var key in object)
	{
		// see above
		if (key != "id" && object.hasOwnProperty(key))
		{
			if (dataSet(row, key, object[key]) == undefined)
			{
				// error should have been shown by dataSet()
				return;
			}
		}
	}
}

function splitItem ()
{
	var id = getIDofCurrentRow();
	if (id == undefined)
	{
		return;
	}

	var obj = getObject(id);
	Logger.log("splitItem: object with keys: " + keys(obj).join());
	// We'll use this object (which is just a copy of the values) to create a
	// new object, with *most* of the same values.
	delete obj.id;				// new object has to get its own ID
	delete obj.completed;		// this is probably blank already, but certainly _should_ be
	obj.added = today();		// we're adding it right now
	var row = newItem(obj);
	if (row == undefined)
	{
		return;
	}
	// meanwhile, close out the existing object
	updateItem({ id: id, completed: today() });
	// finally, let the user edit the new item if they want to
	row.activate();
}

function jumpToItem ()
{
	var id = getIDofCurrentRow();
	if (id == undefined)
	{
		return;
	}

	var row = getRowForObject(id);
	if (row == undefined)
	{
		return;
	}

	row.activate();
}


function getIDofCurrentRow ()
{
	var pos = SpreadsheetApp.getActiveSpreadsheet().getActiveCell();
	var id = getID(pos);
	if (id == undefined)
	{
		showError("This row does not appear to be an item.");
		return;
	}
	return id;
}

function getCurrentRow ()
{
	var id = getIDofCurrentRow();
	if (id == undefined)
	{
		return;
	}
	return getRowForObject(id);
}

function markCompleted ()
{
	var id = getIDofCurrentRow();
	if (id == undefined)
	{
		return;
	}

	updateItem({ id: id, completed: today() });
}

function markCancelled ()
{
	var id = getIDofCurrentRow();
	if (id == undefined)
	{
		return;
	}
	var reason = prompt("CANCEL ITEM", "Reason for cancellation:");
	if (reason == undefined)
	{
		return;
	}

	var obj = getObject(id);
	var descr = obj.description + ' {' + reason + '}';
	updateItem({ id: id, list: 'Cancelled', completed: today(), description: descr });
}

function tweakPriority (amount)
{
	var item = getCurrentRow();
	if (item == undefined)
	{
		return;
	}

	var due_col = dataHeaderColumn("due");
	var cell = item.getCell(1, due_col);
	var value = cell.getValue();
	if (value != "")
	{
		var date = dateFromCell(cell);
		Logger.log("tweakPriority: got date from cell: " + date.toString());
		date.setDate(date.getDate() + amount);
		dateIntoCell(date, cell);
	}
	else
	{
		var pri_col = dataHeaderColumn("priority");
		cell = item.getCell(1, pri_col);
		value = cell.getValue();
		if (value != "")
		{
			var letter = value.charCodeAt(0) - 64;	// so "A" == 1, "B == 2, "C" == 3
			var number = value.charAt(1);
			number = Number(number) + amount;
			if (number < 1 || number > 3)
			{
				// subtract 1 to go back to 0-index
				number -= 1;
				// divide by 3 because this is essentially base-3
				// then floor (not truncate!) to get the proper integer
				var letter_adjustment = Math.floor( number / 3 );
				letter += letter_adjustment;
				// number is now the remainder
				// see: http://javascript.about.com/od/problemsolving/a/modulobug.htm
				// have I mentioned lately that Javascript is stupid?
				number = (number % 3 + 3) % 3;
				// and, finally, back to 1-index
				number += 1;
				if (letter < 1 || letter > 3)
				{
					showError("trying to adjust priority out-of-bounds: " + letter + '/' + number);
					return;
				}
			}
			var new_pri = String.fromCharCode(64 + letter) + number;
			Logger.log("tweakPriority: setting (hopefully) to new priority: " + new_pri);
			cell.setValue(new_pri);
		}
		else
		{
			showError("Don't know how to push/bump (item has no due date or priority).");
			return;
		}
	}
}

function bumpItem () { tweakPriority(-1) }
function pushItem () { tweakPriority(1)  }


/*
 ********************
 *		InTray		*
 ********************
 */

function newInTray ()
{
	var descr = prompt("NEW ITEM", "Item to add to in tray:");
	if (descr == undefined)
	{
		return;
	}
	newItem({ list: "InTray", added: today(), description: descr });
}

function emptyInTray ()
{
	var tab = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("InTray");
	var first_row = tab.getFrozenRows() + 1;
	var last_row = getFirstEmptyRow("InTray", 11).getRow() - 1;
	if (first_row > last_row)
	{
		showError("InTray is already empty!");
		return;
	}

	Logger.log("emptyInTray: going from row " + last_row + " to row " + first_row);
	for (var i=last_row; i >= first_row; --i)
	{
		var row = getDataSlice(tab, { row: i, as: 'range' });
		var new_list = row.getValue();				// value of the first cell in the row
		var id = getID(row);
		updateItem({ id: id, list: new_list });
		row.getCell(1, 1).clear();					// clear out the new_list value now that we've used it
	}
}


/*
 ********************
 *		Tasks		*
 ********************
 */

function newTask ()
{
	var taskname = prompt("NEW TASK", "Name of task:");
	if (taskname == undefined)
	{
		return;
	}
	var priority = prompt("NEW TASK", "Priority for new task:");
	if (priority == undefined)
	{
		return;
	}

	var tab = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Tasks");
	var data = tab.activate().getDataRange().getValues();
	for (var i=0; i < data.length; ++i)
	{
		if (data[i][0] == "")
		{
			Logger.log("newTask: found blank row " + row);
			tab.getRange(i + 1, 1).setValues([priority, taskname]);
			resort();
			return;
		}
	}
	/* no blank row found; make one */
	tab.appendRow([priority, taskname]);
	resort();
}


/*
 ********************
 *		Daily		*
 ********************
 */

function newDay ()
{
	Logger.log("newDay: firing up");
	var me = SpreadsheetApp.getActiveSpreadsheet();
	var tab = me.getSheetByName("Today");
	tab.activate();
	Logger.log("newDay: activated tab");

	// save any potential changes to "yesterday"
	// before we switch over to "tomorrow"
	saveDay();

	var date = me.getRange("TodaysDate");
	date.setValue( today() );

	Logger.log("newDay: going to pull template tab");
	var templ = me.getSheetByName("DayTemplates");
	Logger.log("newDay: going to find 'Today' header");
	var col = getColumnOfHeader(templ, "Today");
	Logger.log("newDay: pulling new schedule");
	var values = getDataSlice(templ, { col: col, as: 'values' });
	var schedule = getDataSlice(tab, { col: getColumnOfHeader(tab, "Schedule"), as: 'range' });
	Logger.log("newDay: finding old schedule");
	Logger.log("newDay: going to get value at " + templ.getRange(2, 2).getA1Notation());
	var start_time = templ.getRange(2, 2).getValue();
	// cut schedule down to however many values we got back from the template
	schedule = schedule.offset(0, 0, values.length);
	schedule.setValues(values);
	tab.getRange(1, 2).setValue(start_time);

	// now that "tomorrow" is "today," save again
	saveDay();
}


function saveDay ()
{
	Logger.log("saveDay: firing up");
	var me = SpreadsheetApp.getActiveSpreadsheet();
	var tab = me.getSheetByName("Today");
	tab.activate();
	var date = me.getRange("TodaysDateSortable").getValue();

	// using hardcoded ID for diary sheet open
	// less than ideal, but a PITA to do it any other way
	Logger.log("saveDay: about to open diary");
	var diary = SpreadsheetApp.openById("1F9ge-m3ez4Yp4jzuQvtRolTP61Dr1rH7D2qoibRxkzI");
	var day = diary.getSheetByName(date);
	Logger.log("saveDay: trying to find sheet: " + date);
	if (day == null)
	{
		// fresh copy
		Logger.log("saveDay: fresh copy");
		var day = tab.copyTo(diary);
		Logger.log("saveDay: created new sheet");
		day.setName(date);

		var due_values = getDataBlock(tab, "#2", "#3").getValues();
		getDataBlock(day, "#2", "#3").setValues(due_values);

		// tweak column headers
		var top_row = tab.getSheetValues(1, 1, 1, tab.getMaxColumns())[0];
		for (var i=0, len=top_row.length; i < len; ++i)
		{
			Logger.log("saveDay: at column " + (i + 1) + ", top row is " + top_row[i]);
			if (top_row[i] == "Todo Today")
			{
				Logger.log("saveDay: resetting column header at 1," + (i + 1));
				day.getRange(1, i + 1).setValue("At Start: " + top_row[i]);
			}
			else if (top_row[i] == "Completed Today")
			{
				Logger.log("saveDay: resetting column header at 1," + (i + 1));
				day.getRange(1, i + 1).setValue("At End: " + top_row[i]);
			}
		}
	}
	else
	{
		// recopy start/end hour and schedule data
		Logger.log("saveDay: recopy left and right panes");
		day.getRange("TodaysStartHour").setValue(tab.getRange("TodaysStartHour").getValue());
		day.getRange("TodaysEndHour").setValue(tab.getRange("TodaysEndHour").getValue());
		var schedule = getDataBlock(tab, "Schedule", "Schedule").getValues();
		getDataBlock(day, "Schedule", "Schedule").setValues(schedule);

		// copy completed tasks
		var completed = getDataBlock(tab, "#3", "#END").getValues();
		getDataBlock(day, "#3", "#END").setValues(completed);
	}
}


/*
 ********************
 *		Projects	*
 ********************
 */


/*
 ************************
 *		multiple tabs	*
 ************************
 */

function resort ()
{
	var tab = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
	var data = tab.getDataRange().getValues();
	var to_delete = [];
	for (var i = data.length - 1; i >= 0; --i)
	{
		if (data[i][0] == "X")
		{
			var row = i + 1;
			Logger.log("resort: going to delete row " + row);
			to_delete.push(row);
		}
	}
	for (var i = 0; i < to_delete.length; ++i)
	{
		var row = to_delete[i];
		Logger.log("resort: about to delete row " + row);
		tab.deleteRow(row);
	}
	tab.sort(1);
	tab.getRange(tab.getFrozenRows()+1, tab.getFrozenColumns()+1).activate();
}


function jumpToBottom ()
{
	// http://stackoverflow.com/questions/6882104/faster-way-to-find-the-first-empty-row
	var me = SpreadsheetApp.getActiveSpreadsheet();
	var tab = me.getActiveSheet();
	var tabname = tab.getName();

	var row;
	if (tabname == "RawData")
	{
		row = getFirstEmptyRow(tabname, 10);
	}
	else
	{
		row = getFirstEmptyRow(tabname);
	}
	row.activate();
}


/*
 ************************
 *		sheet setup		*
 ************************
 */

function onOpen ()
{
	var ui = SpreadsheetApp.getUi();
	ui.createMenu("Todo")
		.addItem("New Item", "newInTray")
		.addSubMenu(ui.createMenu("More New Stuff")
				.addItem("New Task [old/non-working]", "newTask")
			)
		.addSeparator()
		.addItem("Jump to Full Edit", "jumpToItem")
		.addItem("Mark Completed", "markCompleted")
		.addSubMenu(ui.createMenu("More Edits")
				.addItem("Bump Item", "bumpItem")
				.addItem("Push Item", "pushItem")
				.addSeparator()
				.addItem("Split Open Item", "splitItem")
				.addItem("Cancel Item", "markCancelled")
			)
		.addSeparator()
		.addItem("Empty InTray", "emptyInTray")
		.addItem("Start a New Day", "newDay")
		.addSubMenu(ui.createMenu("More Transitions")
				.addItem("(Re)Save Day to Diary", "saveDay")
			)
		.addSeparator()
		.addItem("Resort",   "resort")
		.addItem("Find Blank Row", "jumpToBottom")
		.addSeparator()
		.addItem("Test", "testCurrentThing")
		.addToUi();
}

function testCurrentThing ()
{
}
