/*
 **********************
 * general item funcs *
 **********************
 */

// Return a list of keys in an object that should not be allowed to be modified.
// Doesn't really need the object, but takes one just to be consistent with `data_keys`.
function ro_keys (obj)
{
	return [ "id", "pri", "list_order", "project_job", "a0_cnt","a1_cnt","a2_cnt","a3_cnt", ];
}

// Return a list of the keys in an object that _can_ be changed.  Essentially the
// opposite of `ro_keys`.  Does use the object in this case.
function data_keys (obj)
{
	l.debug(4, "data_keys: doing set difference: [" + l.keys(obj) + "] - [" + ro_keys() + "] == ["
			+ l.difference(l.keys(obj), ro_keys(obj)) + "]");
	return l.difference(l.keys(obj), ro_keys(obj));
}

function rowIntoObject (row)
{
	var values = row.getValues()[0];
	var obj = {};
	for (var i=0, len=values.length; i < len; ++i)
	{
		l.debug(4, "rowIntoObject: calling dataHeaderColumn(" + (i + 1) + ")");
		var header = dataHeaderColumn(i + 1);
		if (header == undefined)
		{
			return;
		}
		obj[header] = values[i];
	}
	return obj;
}


function getID (range)
{
	var row = range.getRow();
	var tab = range.getSheet();
	var last_header_row = tab.getFrozenRows();
	if (row <= last_header_row)
	{
		l.showError("Get out of the header!");
		return;
	}

	var id_col = l.getColumnOfHeader(tab, "ID");
	if (id_col == undefined)
	{
		l.showError("You're not on a sheet with an ID column.");
		return;
	}
	var vals = tab.getSheetValues(row, id_col, 1, 1);
	l.debug(4, "getID: returning ID " + vals[0][0]);
	return vals[0][0];
}

function getRowForObject (id)
{
	var me = SpreadsheetApp.getActiveSpreadsheet();
	l.debug(3, "getRowForObject: id isa " + l.ref(id));
	var tab = me.getSheetByName( typeof(id) == "string" && id.charAt(0) == "T" ? "TVRawData" : "RawData" );
	// cheating a bit by assuming ID is always in column 1 (and no frozen cols)
	// but this is also a performance enhancement, so I'll allow it
	var ids = l.getDataSlice(tab, { col: 1, as: "values" });
	for (var i=0, len=ids.length; i < len; ++i)
	{
		if (ids[i][0] == id)
		{
			// go from 0-origin to 1-origin
			// and account for header rows, which getDataColumn() throws away
			return l.getDataSlice(tab, { row: i + 1, after_headers: true, as: "range" });
		}
	}
	return;											// undefined if not found
}

function getObject (id)
{
	return rowIntoObject(getRowForObject(id));
}

var data_headers;
var data_header_row;
function dataHeaderColumn (column)
{
	if (data_headers == undefined)
	{
		var tab = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("RawData");
		// using `.slice()` to make a copy of the array, else we'd update the original array
		// oblig SO ref: https://stackoverflow.com/questions/7486085/copying-array-by-value-in-javascript
		data_header_row = l.tabHeaders(tab).slice();
		data_headers = {};
		for (var i=0, len=data_header_row.length; i < len; ++i)
		{
			var header = data_header_row[i].toLowerCase();
			data_header_row[i] = header;			// save LC version back to the array
			data_headers[header] = i + 1;			// go from 0-origin to 1-origin
		}
	}

	if (typeof(column) == 'number' && column > 0 && column <= data_header_row.length)
	{
		return data_header_row[column - 1];
	}
	else if (typeof(column) == 'string' && data_headers.hasOwnProperty(column))
	{
		return data_headers[column];
	}
	else
	{
		l.showError("No such column in data: " + column);
		return;
	}
}

function dataSet (row, column, value)
{
	if (!typeof(row) == "Range")
	{
		l.showError("dataSet: first arg must be a Range");
		return;
	}

	var col = dataHeaderColumn(column);
	if (col == undefined)
	{
		return;
	}
	else
	{
		row.getCell(1, col).setValue(value);
		return 1;
	}
}


function getIDofCurrentRow ()
{
	var pos = SpreadsheetApp.getActiveSpreadsheet().getActiveCell();
	var id = getID(pos);
	if (id == undefined)
	{
		l.showError("This row does not appear to be an item.");
		return;
	}
	return id;
}

function getCurrentRow ()
{
	var id = getIDofCurrentRow();
	if (id == undefined)
	{
		return;
	}
	return getRowForObject(id);
}


function newItem (object, tabname)
{
	// Handle defaults, since GAS JS is too old to do it in the signature.
	if ( tabname == undefined )
	{
		tabname = "RawData";
	}
	var tab = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("RawData");
	var headers = l.tabHeaders(tab);
	var new_row = l.getFirstEmptyRow(tabname, "Description");
	if (new_row == undefined)
	{
		l.showError("can't find an empty row for a new item");
		return;
	}
	if (!object.hasOwnProperty("description"))
	{
		l.showError("can't make an item without a description");
		return;
	}

	l.keys(object).forEach(function (key)
	{
		l.debug(2, "newItem: going to set " + key + " to " + object[key]);
		if (dataSet(new_row, key, object[key]) == undefined)
		{
			return;
		}
	});

	return new_row;
}

function updateItem (object)
{
	if (!object.hasOwnProperty("id"))
	{
		l.showError("Can't update item without ID.");
		return;
	}

	var row = getRowForObject(object.id);
	if (row == undefined)
	{
		l.showError("Illegal ID " + id + " (which should be impossible).");
		return;
	}

	l.foreach(data_keys(object), function (key)
	{
		l.debug(4, "updateItem: updating key: " + key + " which has value: " + object[key]);
		if (dataSet(row, key, object[key]) == undefined)
		{
			// error should have been shown by dataSet()
			return;
		}
	});
}

function copyItem (obj)
{
	// The `obj` passed in should be a copy which it's okay to modify.
	l.foreach(ro_keys(), function (_) { delete obj[_] });				// don't mess with ro keys
	obj.added = l.today();												// we're adding it right now
	return newItem(obj);												// turn obj values into real item
}

function duplicateItem ()
{
	splitItem(false);
}
function splitItem (close_out)
{
	var id = getIDofCurrentRow();
	if (id == undefined)
	{
		return;
	}

	var obj = getObject(id);
	l.debug(2, "splitItem: object with keys: " + l.keys(obj).join(","));
	// If the user didn't demand one way or the other, figure out if this item
	// needs to be closed out.  Obviously we have to do this _before_ we blank
	// out the completed date for the new copy.  If it already has a completed
	// date, don't close it out.
	if (close_out == undefined)
	{
		close_out = obj.completed ? false : true;
	}
	// We'll use this object (which is just a copy of the values) to create a
	// new object, with *most* of the same values.
	delete obj.completed;		// this may be blank already, but certainly _should_ be
	var row = copyItem(obj);
	if (row == undefined)
	{
		return;
	}
	// close out the existing object if necessary
	if (close_out)
	{
		updateItem({ id: id, completed: l.today() });
	}
	// finally, let the user edit the new item if they want to
	row.activate();
}

function jumpToItem ()
{
	var id = getIDofCurrentRow();
	if (id == undefined)
	{
		return;
	}

	var row = getRowForObject(id);
	if (row == undefined)
	{
		return;
	}

	row.activate();
}

function visitFilteredRows (tabName, apply)
{
	// the tasks tab has only non-completed tasks, which is almost exactly the subset we need
	var tab = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(tabName);
	var data_vals = tab.getDataRange().getValues();
	var cols = {};
	l.foreach(l.tabHeaders(tab), function (_, idx)
	{
		var col = _.toLowerCase();
		cols[col] = idx;
		l.debug(4, "visitFilteredRows: set col[" + col + "] to " + idx);
	});
	for (var i=0; i < data_vals.length; ++i)
	{
		var id = data_vals[i][cols.id];
		if (id == "")
		{
			break;
		}
		if (!apply(data_vals[i], cols))
		{
			// returning false from the apply() func means they want to bail out
			return false;
		}
	}
	return true;
}


function markCompleted ()
{
	var id = getIDofCurrentRow();
	if (id == undefined)
	{
		return;
	}

	var obj = getObject(id);
	if (obj.list == "Project")						// projects never close
	{
		l.showError("Projects are never completed (by definition).");
		return;
	}
	else if (obj.list == "Job")						// jobs can only close if all their tasks are completed
	{
		l.progress("Looking for outstanding tasks for job " + obj.code);
		// if visitFilteredRows makes it without bailing out early, that means there's no further tasks for this job
		var no_more_tasks = visitFilteredRows("Tasks", function (row, cols)
		{
			var code = row[cols.code];
			if (code == obj.code)
			{
				return false;
			}
			return true;
		});
		l.progress("Done");
		if (!no_more_tasks)
		{
			l.showError("Job cannot be completed (tasks are still outstanding!).");
			return;
		}
	}
	// job tasks or project blocks with a set priority need special handling:
	// we have to find any lower-priority tasks/blocks in the same job/project and bump their priorities
	else if ((obj.list == "Task" || obj.list == "Block" || obj.list == "Show") && obj.code != "" && obj.priority != "")
	{
		// the tasks and blocks tabs have only non-completed items, which is almost exactly the subset we need
		var plural = obj.list + 's';
		l.progress("Looking for lower priority " + plural + " for job " + obj.code);
		visitFilteredRows(plural, function (row, cols)
		{
			var id   = row[cols.id];
			var code = row[cols.code];
			var pri  = row[cols.priority];
			l.debug(5, "markCompleted: row isa " + l.ref(row) + ", "
					+ "cols are: code[" + cols.code + "], pri[" + cols.pri + "]");
			l.debug(4, "markCompleted: comparing " + code + " to " + obj.code + " and " + pri + " to " + obj.priority);
			// look for the same code and the same priority, but *not* the same item!
			if (code == obj.code && pri == obj.priority && id != obj.id)
			{
				// we have more items at this same priority; don't bump anything
				l.progress("Remaining " + plural + " at this priority level; bailing");
				return false;
			}
			if (code == obj.code && pri > obj.priority)
			{
				var new_pri = incPriority(pri, -1, { max_letter: 26, max_num: 9 });
				l.progress("Bumping " + obj.list + " " + id + ": " + pri + " => " + new_pri);
				updateItem({ id: id, priority: new_pri });
			}
			return true;
		});
		obj.priority = "";
		l.progress("Done");
	}
	obj.completed = l.today();
	updateItem(obj);
}

function markCancelled ()
{
	var id = getIDofCurrentRow();
	if (id == undefined)
	{
		return;
	}
	var reason = l.prompt("CANCEL ITEM", "Reason for cancellation:");
	if (reason == undefined)
	{
		return;
	}

	var obj = getObject(id);
	var descr = obj.description + ' {' + reason + '}';
	updateItem({ id: id, list: 'Cancelled', completed: l.today(), description: descr });
}

function setDueDate (new_val)
{
	var item = getCurrentRow();
	if (item == undefined)
	{
		return;
	}

	var due_col = dataHeaderColumn("due");
	var cell = item.getCell(1, due_col);
	l.debug(4, "setDueDate: incoming value has type " + l.ref(new_val));
	if ( l.ref(new_val) == "Date" )
	{
		l.dateIntoCell(new_val, cell);
	}
	else
	{
		cell.setValue( new_val );
	}
}

function incPriority (base, inc, opts)
{
	// Handle defaults, since GAS JS is too old to do it in the signature.
	if ( opts == undefined )
	{
		opts = { max_num: undefined, max_letter: undefined };
	}
	if ( opts.max_num == undefined )
	{
		opts.max_num = 3;
	}
	if ( opts.max_letter == undefined )
	{
		opts.max_letter = 26;
	}

	var letter = base.charCodeAt(0) - 64;	// so "A" == 1, "B == 2, "C" == 3, etc
	var number = base.charAt(1);
	number = Number(number) + inc;
	if (number < 1 || number > opts.max_num)
	{
		// subtract 1 to go back to 0-index
		number -= 1;
		// divide by 3 because this is essentially base-3
		// then floor (not truncate!) to get the proper integer
		var letter_adjustment = Math.floor( number / opts.max_num );
		letter += letter_adjustment;
		// number is now the remainder
		// see: http://javascript.about.com/od/problemsolving/a/modulobug.htm
		// have I mentioned lately that Javascript is stupid?
		number = (number % opts.max_num + opts.max_num) % opts.max_num;
		// and, finally, back to 1-index
		number += 1;
		if (letter < 1 || letter > opts.max_letter)
		{
			l.showError("trying to adjust priority out-of-bounds: " +
					letter + '/' + number + ' [' + opts.max_letter + '/' + opts.max_num + ']');
			return;
		}
	}
	return String.fromCharCode(64 + letter) + number;
}

function tweakPriority (amount)
{
	var item = getCurrentRow();
	if (item == undefined)
	{
		return;
	}

	var due_col = dataHeaderColumn("due");
	var cell = item.getCell(1, due_col);
	var value = cell.getValue();
	if (value != "")
	{
		var date = l.dateFromCell(cell);
		l.debug(3, "tweakPriority: got date from cell: " + date.toString());
		l.dateIntoCell(l.addDays(date, amount), cell);
	}
	else
	{
		var pri_col = dataHeaderColumn("priority");
		cell = item.getCell(1, pri_col);
		value = cell.getValue();
		if (value != "")
		{
			var new_pri = incPriority(value, amount);
			if (new_pri == undefined)
			{
				// error already printed by incPriority
				return;
			}
			l.debug(3, "tweakPriority: setting (hopefully) to new priority: " + new_pri);
			cell.setValue(new_pri);
		}
		else
		{
			if (l.confirm("No priority or due date; shall we push from today's date?"))
			{
				var date = l.today({ as: 'date' });
				date.setDate(date.getDate() + amount);
				cell = item.getCell(1, due_col);
				l.dateIntoCell(date, cell);
			}
			else
			{
				l.showError("Don't know how to push/bump (item has no due date or priority).");
				return;
			}
		}
	}
}

function bumpItem () { tweakPriority(-1) }
function pushItem () { tweakPriority(1)  }

function pushItemArbitrary ()
{
	var push_amt = l.prompt("PUSH ITEM", "Push by (days) or push to (date):");
	if (push_amt == undefined)
	{
		return;
	}

	// check to see whether it's a date or an offset
	push_amt = push_amt.toLowerCase();
	if ( new RegExp('/').test(push_amt) )			// prolly nicer-looking than `/\//.test` ...
	{
		setDueDate(push_amt);
	}
	else if ( /^[+-]?\d+$/.test(push_amt) )
	{
		tweakPriority(Number(push_amt));
	}
	else if ( /^[a-z]+$/.test(push_amt) )
	{
		var days = { sun: 0, mon: 1, tue: 2, wed: 3, thu: 4, fri: 5, sat: 6 };
		var day = days[push_amt];
		if (day == undefined)
		{
			l.showError("I thought " + push_amt + " was a day name, but I don't recognize it.");
			return;
		}

		var date = l.today({ as: 'date' });
		date.setDate( date.getDate() + ((day + 7 - date.getDay()) % 7) );
		date = l.nextDoW(date, day);
		l.debug(3, "pushItemArbitrary: new date => " + date.toISOString());
		setDueDate(date);
	}
	else
	{
		l.showError("Don't know how to convert " + push_amt + " to a date or date offset.");
		return;
	}
}


/*
 ************************
 *	InTray & Recurring	*
 ************************
 */

function newInTray ()
{
	var descr = l.prompt("NEW ITEM", "Item to add to in tray:");
	if (descr == undefined)
	{
		return;
	}
	newItem({ list: "InTray", added: l.today(), description: descr });
}

function newAndEdit ()
{
	var descr = l.prompt("NEW ITEM", "Item to add:");
	if (descr == undefined)
	{
		return;
	}
	var row = newItem({ list: "InTray", added: l.today(), description: descr });
	row.activate();
}

function emptyInTray ()
{
	var tab = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("InTray");
	var first_row = tab.getFrozenRows() + 1;
	var last_row = l.getFirstEmptyRow("InTray", "Description").getRow() - 1;
	if (first_row > last_row)
	{
		l.showError("InTray is already empty!");
		return;
	}

	l.debug(2, "emptyInTray: going from row " + last_row + " to row " + first_row);
	for (var i=last_row; i >= first_row; --i)
	{
		var row = l.getDataSlice(tab, { row: i, as: 'range' });
		var new_list = row.getValue();				// value of the first cell in the row
		var id = getID(row);
		updateItem({ id: id, list: new_list });
		row.getCell(1, 1).clear();					// clear out the new_list value now that we've used it
	}
}


function addRecurring ()
{
	var me = SpreadsheetApp.getActiveSpreadsheet();
	var tab = me.getActiveSheet();
	var tabname = tab.getName();

	if (tabname != "Recurring")
	{
		if (l.confirm("You're not on the recurring sheet; proceed anyway?"))
		{
			tab = me.getSheetByName("Recurring");
			tab.activate();
		}
		else
		{
			return;
		}
	}

	var num_items = 0;
	var descr_col = l.getColumnOfHeader(tab, "Description");
	var dest_row = jumpToBottom("RawData").getRow();
	var which_rows = l.getDataSlice(tab, { col: 1, as: 'values' });
	l.debug(3, "addRecurring: which_rows isa " + l.ref(which_rows));
	l.each(which_rows, function (value, idx)
	{
		var row = idx + 1;		// convert from 0-origin to 1-origin
		if (value == "X")
		{
			var src_row = l.getDataSlice(tab, { row: row, after_headers: true, as: "range" });
			var template = rowIntoObject( src_row );
			// set due date based on a few different formats
			var due = template.due;
			if ( /^[+-]?\d+$/.test(due) )
			{
				template.due = l.dateAsString(l.addDays(l.today({ as: 'date' }), due));
			}
			else if ( /^\d{1,2}[a-z]{2}$/.test(due) )
			{
				var day = due.substr(0,due.length-2);
				var due = new Date();
				due.setDate(day);
				// let's assume that we always want dates in _next_ month
				due.setMonth( due.getMonth() + 1 );
				template.due = l.dateAsString(due);
			}
			else if ( due == "" )
			{
				template.due = "";
			}
			else
			{
				l.showError("can't figure out recurring due date format: " + due);
				return;
			}
			// handle any potential alternating tasks
			if ( new RegExp('//').test(template.description) )			// *definitely* nicer-looking than `/\/\//.test`
			{
				var parts = template.description.split('//');
				var which = l.int( parts.pop() );
				template.description = parts[which-1];
				// update the source so next time we get the next part
				var next = which == parts.length ? 1 : which + 1;
				parts.push( next );
				src_row.getCell(1, descr_col).setValue( parts.join('//') );
			}
			copyItem(template);
			++num_items;
		}
		else if (value != "")
		{
			l.showError("Illegal check value in row " + row + ": " + value);
			// non-fatal error, so just keep going
		}
	});
	l.debug(2, "addRecurring: found " + num_items + " items");

	if (num_items)
	{
		// clear Xs on Recurring tab before reporting success
		// that way, timing out won't leave stray Xs lying around
		l.getDataSlice(tab, { col: 1, after_headers: true, as: 'range' }).clearContent();

		l.infoMsg("Added " + num_items + " new tasks.");
		var rdata = me.getSheetByName("RawData");
		rdata.getRange(dest_row, 1, num_items, rdata.getMaxColumns()).activate();
	}
	else
	{
		tab.activate();
		l.showError("No recurring tasks selected to add.");
	}
}


function newTVSeason ()
{
	var me = SpreadsheetApp.getActiveSpreadsheet();
	var tab = me.getSheetByName("TVRawData");

	var show = l.prompt("NEW TV SHOW", "Show to add:");
	if (show == undefined)
	{
		return;
	}
	var network = l.prompt("NEW TV SHOW", "Network (required):");
	var code;
	if (network == undefined)
	{
		return;
	}
	else
	{
		var code_table = me.getRange("TVCodeLookup").getValues();
		l.debug(3, "newTVSeason: code_table isa " + l.ref(code_table));
		l.debug(3, "newTVSeason: read " + code_table.length + " rows");
		var row =
			l.grep(code_table, function (row)
			{
				l.debug(4, "newTVSeason: checking row [" + row[0] + "][" + row[1] + "]");
				return row[0] == network;
			});
		if (row == undefined)
		{
			l.showError("Network " + network + " not recognized (check TV code on ControlData tab).");
			return;
		}
		code = row[1];
		l.debug(2, "newTVSeason: got code " + code);
	}
	var context = l.prompt("NEW TV SHOW", "Watching with (required):");
	if (context == undefined)
	{
		return;
	}
	var season = l.int(l.prompt("NEW TV SHOW", "Season # (required):"));
	if (season == undefined)
	{
		return;
	}
	var num_episodes = l.int(l.prompt("NEW TV SHOW", "# episodes this season (required):"));
	if (num_episodes == undefined)
	{
		return;
	}
	var start = l.int(l.prompt("NEW TV SHOW", "Start with episode? (default: 1)"));
	if (start == undefined)
	{
		start = 1;
	}
	if (start > num_episodes)
	{
		l.showError("Start episode must be smaller than number of episodes.");
		return;
	}

	var descr = show + " [S" + season + "]";
	var obj = { list: "Season", context: context, added: l.today(), code: code, description: descr };
	newItem(obj, "TVRawData");
	var pri = "A1";
	for (var i=start; i <= num_episodes; ++i)
	{
		if (i < 0)
		{
			descr = show + " [S" + (season - 1) + "E" + (num_episodes + i + 1) + "]";
		}
		else if (i > 0)
		{
			descr = show + " [S" + season + "E" + i + "]";
		}
		else
		{
			descr = undefined;
		}
		if (descr != undefined)
		{
			obj = { priority: pri, list: "Show", context: context, added: l.today(), code: code, description: descr };
			newItem(obj, "TVRawData");
			pri = incPriority(pri, 1, { max_num: 9 });
		}
	}
}


/*
 ********************
 *		Tasks		*
 ********************
 */

function newTaskToday (mark_completed)
{
	// Handle defaults, since GAS JS is too old to do it in the signature.
	if ( mark_completed == undefined )
	{
		mark_completed = false;
	}

	var descr = l.prompt("NEW TASK", "Task to add:");
	if (descr == undefined)
	{
		return;
	}
	var context = l.prompt("NEW TASK", "Context (required):");
	if (context == undefined)
	{
		return;
	}
	var code = l.prompt("NEW TASK", "Code (optional):");
	if (code == undefined)
	{
		code = '';
	}
	var obj = { list: "Task", context: context, added: l.today(), code: code, description: descr };
	if (mark_completed)
	{
		obj.completed = l.today();
	}
	else
	{
		obj.due = l.today();
	}
	newItem(obj);
}

function newTaskCompleted () { newTaskToday(true) }

function newWorkTask ()
{
	var descr = l.prompt("NEW TASK", "Task to add:");
	if (descr == undefined)
	{
		return;
	}
	var code = l.prompt("NEW TASK", "Code (required):");
	if (code == undefined)
	{
		return;
	}
	else
	{
		// Verify this is a work code.
		if (code.length == 5 || code.length == 3 && code.charAt(0) == 'W')
		{
			// all good
		}
		else
		{
			l.showError("Code " + code + " does not appear to be a work code.");
			return;
		}
	}
	var priority = l.prompt("NEW TASK", "Priority (default: A1):");
	if (priority == undefined)
	{
		priority = 'A1';
	}
	var obj = { list: "Task", context: "Work", added: l.today(), code: code, priority: priority, description: descr };
	newItem(obj);
}


function newTask ()
{
	l.showError("This function doesn't work any more.");
	return;

	var taskname = l.prompt("NEW TASK", "Name of task:");
	if (taskname == undefined)
	{
		return;
	}
	var priority = l.prompt("NEW TASK", "Priority for new task:");
	if (priority == undefined)
	{
		return;
	}

	var tab = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Tasks");
	var data = tab.activate().getDataRange().getValues();
	for (var i=0; i < data.length; ++i)
	{
		if (data[i][0] == "")
		{
			l.debug(2, "newTask: found blank row " + row);
			tab.getRange(i + 1, 1).setValues([priority, taskname]);
			resort();
			return;
		}
	}
	/* no blank row found; make one */
	tab.appendRow([priority, taskname]);
	resort();
}


/*
 ********************
 *		Daily		*
 ********************
 */

function newDay ()
{
	l.debug(5, "newDay: firing up");
	var me = SpreadsheetApp.getActiveSpreadsheet();
	var tab = me.getSheetByName("Today");
	tab.activate();
	l.debug(5, "newDay: activated tab");

	// save any potential changes to "yesterday"
	// before we switch over to "tomorrow"
	saveDay();

	var date = me.getRange("TodaysDate");
	date.setValue( l.today() );

	l.debug(5, "newDay: going to pull template tab");
	var templ = me.getSheetByName("DayTemplates");
	l.debug(5, "newDay: going to find 'Today' header");
	var col = l.getColumnOfHeader(templ, "Today");
	l.debug(5, "newDay: pulling new schedule");
	var values = l.getDataSlice(templ, { col: col, as: 'values' });
	var schedule = l.getDataSlice(tab, { col: l.getColumnOfHeader(tab, "Schedule"), as: 'range' });
	l.debug(5, "newDay: finding old schedule");
	l.debug(3, "newDay: going to get value at " + templ.getRange(2, 2).getA1Notation());
	var start_time = templ.getRange(2, 2).getValue();
	// cut schedule down to however many values we got back from the template
	schedule = schedule.offset(0, 0, values.length);
	schedule.setValues(values);
	tab.getRange(1, 2).setValue(start_time);

	// now that "tomorrow" is "today," save again
	saveDay();
}

function extendTodayByOneHour () { extendToday( 1) }
function reduceTodayByOneHour () { extendToday(-1) }

function extendToday (amount)
{
	var me = SpreadsheetApp.getActiveSpreadsheet();
	var tab = me.getActiveSheet();
	var tabname = tab.getName();

	if (tabname != "Today")
	{
		if (l.confirm("You're not on today's sheet; proceed anyway?"))
		{
			tab = me.getSheetByName("Today");
			tab.activate();
		}
		else
		{
			return;
		}
	}

	var D1 = me.getRange("D1");
	var C4 = me.getRange("C4");
	C4.setFormula("=D1+" + amount + "/24");
	D1.setValue(C4.getValue());
	C4.clearContent();
}


function saveDay ()
{
	l.debug(5, "saveDay: firing up");
	var me = SpreadsheetApp.getActiveSpreadsheet();
	var tab = me.getSheetByName("Today");
	tab.activate();
	var date = me.getRange("TodaysDateSortable").getValue();

	// using hardcoded ID for diary sheet open
	// less than ideal, but a PITA to do it any other way
	l.debug(5, "saveDay: about to open diary");
	var diary = SpreadsheetApp.openById("1F9ge-m3ez4Yp4jzuQvtRolTP61Dr1rH7D2qoibRxkzI");
	var day = diary.getSheetByName(date);
	l.debug(2, "saveDay: trying to find sheet: " + date);
	if (day == null)
	{
		// fresh copy
		l.debug(5, "saveDay: fresh copy");
		var day = tab.copyTo(diary);
		l.debug(5, "saveDay: created new sheet");
		day.setName(date);

		var due_values = l.getDataBlock(tab, "#2", "#3").getValues();
		l.getDataBlock(day, "#2", "#3").setValues(due_values);

		// tweak column headers
		var top_row = tab.getSheetValues(1, 1, 1, tab.getMaxColumns())[0];
		for (var i=0, len=top_row.length; i < len; ++i)
		{
			l.debug(4, "saveDay: at column " + (i + 1) + ", top row is " + top_row[i]);
			if (top_row[i] == "Todo Today")
			{
				l.debug(4, "saveDay: resetting column header at 1," + (i + 1));
				day.getRange(1, i + 1).setValue("At Start: " + top_row[i]);
			}
			else if (top_row[i] == "Completed Today")
			{
				l.debug(4, "saveDay: resetting column header at 1," + (i + 1));
				day.getRange(1, i + 1).setValue("At End: " + top_row[i]);
			}
		}
	}
	else
	{
		// recopy start/end hour and schedule data
		l.debug(5, "saveDay: recopy left and right panes");
		day.getRange("TodaysStartHour").setValue(tab.getRange("TodaysStartHour").getValue());
		day.getRange("TodaysEndHour").setValue(tab.getRange("TodaysEndHour").getValue());
		var schedule = l.getDataBlock(tab, "Schedule", "Schedule").getValues();
		l.getDataBlock(day, "Schedule", "Schedule").setValues(schedule);

		// copy completed tasks
		var completed = l.getDataBlock(tab, "#3", "#END").getValues();
		l.getDataBlock(day, "#3", "#END").setValues(completed);

		// after final recopy, remove hidden columns
		// they just take up space and reduce the number of days we can have in the diary at a time
		l.deleteAllHiddenColumns(day);
	}
}


function saveToHistory ()
{
	l.debug(5, "saveToHistory: firing up");
	var diary = SpreadsheetApp.openById("1F9ge-m3ez4Yp4jzuQvtRolTP61Dr1rH7D2qoibRxkzI");
	l.progress("Finding earliest month");
	var tabs = diary.getSheets();

	var quarters   = new Object();
	var month_tabs = new Object();
	for (var i = 0; i < tabs.length; ++i)
	{
		var name = tabs[i].getName();
		if ( /\d\d\d\d-\d\d-\d\d/.test(name) )
		{
			var year  = name.substr(0,4);
			var month = name.substr(5,2);
			var quarter = l.int((month - 1) / 3) + 1;
			var sheet_name = "CalenDiary History " + year + "-Q" + quarter;
			if (month_tabs[month] == undefined)
			{
				month_tabs[month] = [];
			}
			month_tabs[month].push(tabs[i]);
			if (quarters[sheet_name] == undefined || month < quarters[sheet_name])
			{
				quarters[sheet_name] = month;
			}
		}
	}
	l.progress("Finding history sheet name");
	var potentials = l.keys(quarters);
	potentials.sort();
	var history_name = potentials[0];
	var history_files = DriveApp.getFilesByName(history_name);
	if (history_files.hasNext())
	{
		var history = SpreadsheetApp.open(history_files.next());
		var tabs_to_save = month_tabs[quarters[history_name]];
		var tab_names = tabs_to_save.map(function (_) { return _.getName() }).toString();
		if (l.confirm("Will save these tabs to " + history_name + ": " + tab_names))
		{
			for (var i = 0; i < tabs_to_save.length; ++i)
			{
				var day = tabs_to_save[i];
				var day_name = day.getName();
				l.progress("Moving tab: " + day_name);
				var new_tab = day.copyTo(history);
				new_tab.setName(day_name);
				diary.deleteSheet(day);
			}
		}
		else
		{
			l.showError("Bailing out at user request.");
		}
	}
	else
	{
		l.showError("You must create sheet: " + history_name);
	}
	l.progress("Done");
}


/*
 ********************
 *		Projects	*
 ********************
 */


/*
 ************************
 *		multiple tabs	*
 ************************
 */

function showIDofCurrentRow ()
{
	var id = getIDofCurrentRow();
	if (id != undefined)
	{
		var ui = SpreadsheetApp.getUi();
		ui.alert("INFO", "ID of current row: " + id, ui.ButtonSet.OK);
	}
}


function resort ()
{
	var tab = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
	var data = tab.getDataRange().getValues();
	var to_delete = [];
	for (var i = data.length - 1; i >= 0; --i)
	{
		if (data[i][0] == "X")
		{
			var row = i + 1;
			l.debug(4, "resort: going to delete row " + row);
			to_delete.push(row);
		}
	}
	for (var i = 0; i < to_delete.length; ++i)
	{
		var row = to_delete[i];
		l.debug(4, "resort: about to delete row " + row);
		tab.deleteRow(row);
	}
	tab.sort(1);
	tab.getRange(tab.getFrozenRows()+1, tab.getFrozenColumns()+1).activate();
}


function jumpToBottom (tabname)
{
	if (tabname == undefined)
	{
		var me = SpreadsheetApp.getActiveSpreadsheet();
		var tab = me.getActiveSheet();
		tabname = tab.getName();
	}

	var row;
	if (tabname == "RawData" || tabname == "TVRawData")
	{
		row = l.getFirstEmptyRow(tabname, "Description");
	}
	else
	{
		row = l.getFirstEmptyRow(tabname);
	}
	if (row == undefined)
	{
		l.showError("No blank rows!");
		return;
	}
	return row.activate();
}


/*
 ************************
 *		sheet setup		*
 ************************
 */

function onOpen ()
{
	var ui = SpreadsheetApp.getUi();
	ui.createMenu("Todo")
		.addItem("New Task for Today", "newTaskToday")
		.addItem("New Work Task", "newWorkTask")
		.addItem("New Item and Jump to Edit", "newAndEdit")
		.addItem("Add Recurring Tasks", "addRecurring")
		.addSubMenu(ui.createMenu("More New Stuff")
				.addItem("New InTray Item", "newInTray")
				.addItem("Record Completed Task", "newTaskCompleted")
				.addItem("New TV Season", "newTVSeason")
				.addItem("Duplicate Item", "duplicateItem")
			)
		.addSeparator()
		.addItem("Jump to Full Edit", "jumpToItem")
		.addItem("Push Item (1 Day)", "pushItem")
		.addItem("Mark Completed", "markCompleted")
		.addSubMenu(ui.createMenu("More Edits")
				.addItem("Bump Item", "bumpItem")
				.addItem("Push Item (Any Amount)", "pushItemArbitrary")
				.addSeparator()
				.addItem("Split Open Item", "splitItem")
				.addItem("Cancel Item", "markCancelled")
			)
		.addSeparator()
		.addItem("Empty InTray", "emptyInTray")
		.addItem("Start a New Day", "newDay")
		.addSubMenu(ui.createMenu("More Transitions")
				.addItem("(Re)Save Day to Diary", "saveDay")
				.addItem("Save CalenDiary's Earliest Month to History", "saveToHistory")
				.addSeparator()
				.addItem("Extend Today by 1 Hour", "extendTodayByOneHour")
				.addItem("Reduce Today by 1 Hour", "reduceTodayByOneHour")
			)
		.addSeparator()
		.addSubMenu(ui.createMenu("More Utility Items")
				.addItem("Show Item ID", "showIDofCurrentRow")
				.addItem("Resort", "resort")
			)
		.addItem("Find Blank Row", "jumpToBottom")
		.addSeparator()
		.addItem("Debug Tab", "l.debug_tab")
		.addItem("Test", "testCurrentThing")
		.addToUi();
}

function testCurrentThing ()
{
}
