/*
 ****************************
 * Pass-through Functions   *
 *   from Underscore:       *
 * http://underscorejs.org/ *
 ****************************
 */

var _ = Underscore.load();

// arrays or objects
var contains = _.contains;
var grep       = _.find;		// renamed
var each       = _.each;
var foreach    = _.each;		// alias
var min        = _.min;
var max        = _.max;
var shuffle    = _.shuffle;

// arrays
var last       = _.last;
var tail       = _.tail;
var uniq       = _.uniq;
var union      = _.union;
var flatten    = _.flatten;
var firstidx   = _.findIndex;	// renamed
var difference = _.difference;

// objects
var keys       = _.keys;
var values     = _.values;
var pairs      = _.pairs;

// functions
var memoize    = _.memoize;
var once       = _.once;
var wrap       = _.wrap;

// number
var random    = _.random;		// (min, max)



/*
 ********************
 * Scalar Functions *
 ********************
 */

// It is moderately insane that I have to write this.
// It's a _little_ bit insane that Javascript doesn't have this built in in the
// first place, but I can live with that.  The next best solution is to use
// `constructor.name`, which works great on built-in types such as Array or
// RegExp or Date, but fails abysmally on Google Sheets objects, which always
// return `undefined` for `constructor` (just to be difficult, I suspect).  So,
// if we suspect we've gotten hold of one of those, we have to fall back to
// just trying to convert the object to a string, which magically turns out to
// be the name of the class.  Obligatory Stack Overflow references:
// https://stackoverflow.com/questions/1249531/how-to-get-a-javascript-objects-class
// https://stackoverflow.com/questions/15325301/type-checking-on-google-apps-script-platform
function ref(obj)
{
	if (obj)
	{
		if (obj.constructor && obj.constructor.name)
		{
			return obj.constructor.name;
		}
		else if (typeof obj == 'object') // might be a Google built-in class
		{
			return obj.toString();
		}
	}
	else if (obj == undefined)
	{
		return "undefined";
	}

	return undefined;
}


// Yet another one that it's insane that I have to write myself.  And, once
// again, I *should* have Math.trunc(), but GAS JS just ... doesn't.
// cf. https://stackoverflow.com/questions/10149806/truncate-round-whole-number-in-javascript
function int (number)
{
	return number | 0;
}



/*
 ********************
 *	 Date Stuff		*
 ********************
 */

function dateAsString (date)
{
	if (ref(date) == "Date")
	{
		return (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();
	}
	else
	{
		return "NotADate";
	}
}

function today (opts)
{
	var return_as = opts == undefined ? "string" : opts["as"];

	var today = new Date();
	// Subtract 6 hours so midnight - 6am will be "yesterday."
	// See: https://stackoverflow.com/questions/1050720/adding-hours-to-javascript-date-object
	today.setTime(today.getTime() - 6*60*60*1000);
	if (return_as == "date")
	{
		return today;
	}
	else
	{
		return dateAsString(today);
	}
}

function addDays (date, days)
{
	// I think `setDate` is a mutator, so we need to make a copy.
	var d = new Date(date);
	d.setDate(date.getDate() + days);
	return d;
}

function nextDoW (date, dow)
{
	// we'd like to have Mon == 1, Sun == 7, but sometimes we get Sun == 0, Sat == 6
	// so this will convert from one to the other
	if (dow == 0)
	{
		dow = 7;
	}
	debug(3, "nextDoW: getDay => " + date.getDay() + " offset => " + ((dow + 7 - date.getDay()) % 7));
	date.setDate( date.getDate() + ((dow + 7 - date.getDay()) % 7) );
	return date;
}


function dateFromCell (cell)
{
	return new Date( Date.parse(cell.getValue()) );
}

function dateIntoCell (date, cell)
{
	debug(3, "dateIntoCell: going to set cell " + displayAddress(cell) + " to value: "
			+ dateAsString(date) + " [from " + date.toString() + "]");
	return cell.setValue( dateAsString(date) );
}



/*
 ****************************
 *	General UI functions	*
 * (mostly stolen from the  *
 *  D&D RPG sheets        ) *
 ****************************
 */

	/*	Print a temporary status message to the screen.
	 *	If the message is "Done", remove the message after 3 seconds.
	 *	@param	{string}		msg				message to print
	 */
function progress (msg)
{
	var me = SpreadsheetApp.getActiveSpreadsheet();
	if (msg == "Done")
	{
		me.toast(msg, "Status", 3);
	}
	else
	{
		me.toast(msg, "Status", 30);
	}
}

	/*	Print an error message to the screen.  Requires click to proceed.
	 *	@param	{string}		msg				message to print
	 */
function showError (msg)
{
	var ui = SpreadsheetApp.getUi();
	ui.alert("ERROR", msg, ui.ButtonSet.OK);
}

	/*	Print an informational message to the screen.  Requires click to proceed.
	 *	@param	{string}		msg				message to print
	 */
function infoMsg (msg)
{
	var ui = SpreadsheetApp.getUi();
	ui.alert("INFO", msg, ui.ButtonSet.OK);
}

	/*	Print a confirmation prompt to the screen.  Return `true` or `false`.
	 *	@param	{string}		msg				message to print
	 */
function confirm (msg)
{
	var ui = SpreadsheetApp.getUi();
	var result = ui.alert("CONFIRM TO PROCEED", msg, ui.ButtonSet.YES_NO);
	return result == ui.Button.YES ? true : false;
}

	/*	Ask the user for a string and return it.  Return undefined if the user cancels.
	 *	@param	{title}			string			title for the prompt dialog
	 *	@param	{prompt}		string			prompt to show the user
	 *	@return	{string}						what the user typed; undefined if they cancelled
	 */
function prompt (title, prompt)
{
	var ui = SpreadsheetApp.getUi();
	var result = ui.prompt(title, prompt, ui.ButtonSet.OK_CANCEL);
	return result.getSelectedButton() == ui.Button.OK ? result.getResponseText() : undefined;
}



/*
 ************************
 *		Debugging		*
 ************************
 */

var DEBUG = 0;

	/*	Set debugging on.
	 *	@param	{number}		level			new value for DEBUG
	 *	@return	{number}						previous value of DEBUG
	 */
function setDEBUG (level)
{
	var oldval = DEBUG;
	DEBUG = level;
	return oldval;
}

	/*	Print a message to the screen, but only if DEBUG is on.
	 *	@param	{string}		msg				message to print
	 */
function debug (level, msg)
{
	if (DEBUG >= level)
	{
		if (level == 1)
		{
			var ui = SpreadsheetApp.getUi();
			ui.alert("DEBUG", msg, ui.ButtonSet.OK);
		}
		Logger.log(msg);
	}
}

	/*	Debug some info about the current tab.
	 */
function debug_tab ()
{
	var me = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
	var msg = "data range is " + me.getDataRange().getA1Notation() + "\n"
			+ "tab color is " + me.getTabColor() + "\n";

	var ui = SpreadsheetApp.getUi();
	ui.alert("DEBUG", msg, ui.ButtonSet.OK);
}



/*
 ********************
 *	Sheet Utility	*
 ********************
 */

	/*	Given a range, report its full address (including sheet) in A1 notation.
	 *	@param	{Range}			range			range to show address of
	 *	@return	{string}						the full address
	 */
function displayAddress (range)
{
	return range.getSheet().getName() + "!" + range.getA1Notation();
}

	/*	Return the first empty row on the requested sheet.
	 *	@param	{string}		tab_name		name of the tab to find the first empty row of
	 *	@param	{number}		column			colum to check for values (default: 1)
	 *	@return	{Range}							range representing the first empty row
	 */
function getFirstEmptyRow (tab_name, column)
{
	// Handle defaults, since GAS JS is too old to do it in the signature.
	var col_type = ref(column);
	debug(3, "getFirstEmptyRow: treating column as " + col_type);
	if ( col_type == "undefined" )
	{
		column = 1;
	}
	else if ( col_type == "String" )
	{
		column = getColumnOfHeader(tab_name, column);
	}

	// http://stackoverflow.com/questions/6882104/faster-way-to-find-the-first-empty-row
	var me = SpreadsheetApp.getActiveSpreadsheet();
	var tab = me.getSheetByName(tab_name);
	var first_datarow = tab.getFrozenRows() + 1;
	var values = getDataSlice(tab, { col: column, as: 'values' });
	if (values == undefined)
	{
		return;
	}

	var ct = 0;
	debug(5, "getFirstEmptyRow: checking row " + (ct + first_datarow));
	while ( values[ct][0] != "" )
	{
		debug(5, "getFirstEmptyRow: checking row " + (ct + first_datarow) + " for tab " + tab_name);
		++ct;
	}
	// go from 0-origin to 1-origin
	// and account for header rows, which getDataColumn() throws away
	return getDataSlice(tab, { row: ct + 1, after_headers: true, as: 'range' });
}


// adapted from:
// https://sites.google.com/site/scriptsexamples/learn-by-example/google-sheets-api/filters
function getIndexesOfHiddenColumns (tab)
{
	var ssID = tab.getParent().getId();
	var sheetID = tab.getSheetId();
	var hiddenColumns = [];

	// limit what's returned from the API
	var fields = "sheets(data(columnMetadata(hiddenByUser)),properties/sheetId)";
	var sheets = Sheets.Spreadsheets.get(ssID, {fields: fields}).sheets;

	for (var i = 0; i < sheets.length; i++)
	{
		if (sheets[i].properties.sheetId == sheetID)
		{
			var data = sheets[i].data;
			var columns = data[0].columnMetadata;
			for (var j = 0; j < columns.length; j++)
			{
				if (columns[j].hiddenByUser)
				{
					hiddenColumns.push(j + 1);
				}
			}
		}
	}
	return hiddenColumns;
}

function deleteAllHiddenColumns (tab)
{
	// Handle default, since GAS JS is too old to do it in the signature.
	if (tab == undefined)
	{
		tab = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
	}

	var cols = getIndexesOfHiddenColumns(tab);
	each(cols.reverse(), function (value)
	{
		tab.deleteColumn(value);
	});
}

function deleteHiddenColumnsOnAllTabs ()
{
	var me = SpreadsheetApp.getActiveSpreadsheet();
	each(me.getSheets(), function (tab)
	{
		progress("Shrinking sheet: " + tab.getName())
		deleteAllHiddenColumns(tab);
	});
	progress("Done");
}


function getDataSlice (tab, opts)
{
	var return_as = opts["as"];
	if (return_as == undefined)
	{
		showError("getDataSlice: must specify how to return");
		return;
	}

	var start_row, start_col, num_rows, num_cols;
	if (typeof(opts["row"]) != "undefined")
	{
		var header_cols = tab.getFrozenColumns();
		start_row = opts["row"];
		start_col = header_cols + 1;
		num_rows  = 1;
		num_cols  = tab.getMaxColumns() - header_cols;
		if (opts["after_headers"])
		{
			start_row += tab.getFrozenRows();
		}
	}
	else if (typeof(opts["col"]) != "undefined")
	{
		var header_rows = tab.getFrozenRows();
		start_row = header_rows + 1;
		start_col = opts["col"];
		num_rows  = tab.getMaxRows() - header_rows;
		num_cols  = 1;
		if (opts["after_headers"])
		{
			start_col += tab.getFrozenColumns();
		}
	}
	else
	{
		showError("getDataSlice: must specify either row or column");
		return;
	}

	var range = tab.getRange(start_row, start_col, num_rows, num_cols);
	if ( typeof range == 'undefined' )
	{
		showError("Cannot find any values to slice: " + start_row + ", " + start_col);
		return;
	}

	if (return_as == "range")
	{
		return range;
	}
	else if (return_as == "values")
	{
		return range.getValues();
	}
	else
	{
		showError("getDataRow: illegal return type: " + return_as);
		return;
	}
}


function getDataBlock (tab, start_col, end_col)
{
	var start = getColumnOfHeader(tab, start_col);
	var end   = getColumnOfHeader(tab, end_col  );
	var header_rows = tab.getFrozenRows();
	var height = tab.getMaxRows() - header_rows;
	var width  = end - start + 1;
	return tab.getRange(header_rows + 1, start, height, width);
}


var _tab_headers;
function tabHeaders (tab)
{
	var tab_type = ref(tab);
	var tabName;
	if (tab_type == "Sheet")
	{
		tabName = tab.getName();
	}
	else if (tab_type == "String")
	{
		tabName = tab;
	}
	else
	{
		showError("Don't know how to extract tabname from type " + tab_type);
	}

	if (_tab_headers == undefined)
	{
		_tab_headers = new Object();
	}
	if (_tab_headers[tabName] == undefined)
	{
		if (tab_type == "String")
		{
			tab = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(tabName);
		}
		var headers = tab.getSheetValues(tab.getFrozenRows(), 1, 1, tab.getMaxColumns());
		_tab_headers[tabName] = headers[0];
	}
	return _tab_headers[tabName];
}

function getColumnOfHeader (tab, header)
{
	var headers = tabHeaders(tab);
	debug(3, "getColumnOfHeader: finding column " + header + " on tab "
			+ (ref(tab) == "Sheet" ? 'sheet:' + tab.getName() : tab));
	for (var i=0, len=headers.length; i < len; ++i)
	{
		debug(4, "getColumnOfHeader: checking " + headers[i] + " against " + header);
		if (headers[i] == header)
		{
			return i + 1;							// go from 0-origin to 1-origin
		}
	}
	return;											// undefined if not found
}
